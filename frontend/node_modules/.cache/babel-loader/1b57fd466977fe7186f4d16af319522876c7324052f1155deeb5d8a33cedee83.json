{"ast":null,"code":"// OpenAI API utility functions\n\nconst OPENAI_API_KEY = process.env.REACT_APP_OPENAI_API_KEY;\nconst OPENAI_API_URL = 'https://api.openai.com/v1/chat/completions';\nexport const getAIInsights = async predictionData => {\n  try {\n    const prompt = `Analyze this telecom churn prediction data and provide insights:\n    Total predictions: ${predictionData.total}\n    Churn predictions: ${predictionData.churn_count}\n    Non-churn predictions: ${predictionData.non_churn_count}\n    Churn rate: ${predictionData.churn_rate}%\n    \n    Please provide:\n    1. A brief summary of the prediction results\n    2. 3-5 specific recommendations for customer retention`;\n    const response = await fetch(OPENAI_API_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${OPENAI_API_KEY}`\n      },\n      body: JSON.stringify({\n        model: 'gpt-3.5-turbo',\n        messages: [{\n          role: 'system',\n          content: 'You are a telecom analytics expert. Provide concise, actionable insights based on churn prediction data.'\n        }, {\n          role: 'user',\n          content: prompt\n        }],\n        temperature: 0.7,\n        max_tokens: 500\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to get AI insights');\n    }\n    const data = await response.json();\n    const aiResponse = data.choices[0].message.content;\n\n    // Parse the AI response into structured format\n    const [summary, ...recommendations] = aiResponse.split('\\n\\n');\n    return {\n      summary: summary.replace('Summary:', '').trim(),\n      recommendations: recommendations.filter(rec => rec.trim().length > 0).map(rec => rec.replace(/^\\d+\\.\\s*/, '').trim())\n    };\n  } catch (error) {\n    console.error('Error getting AI insights:', error);\n    throw error;\n  }\n};\nexport const askAI = async (question, context) => {\n  try {\n    const response = await fetch(OPENAI_API_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${OPENAI_API_KEY}`\n      },\n      body: JSON.stringify({\n        model: 'gpt-3.5-turbo',\n        messages: [{\n          role: 'system',\n          content: 'You are a telecom analytics expert. Answer questions about churn prediction data concisely and accurately.'\n        }, {\n          role: 'user',\n          content: `Context: ${JSON.stringify(context)}\\n\\nQuestion: ${question}`\n        }],\n        temperature: 0.7,\n        max_tokens: 300\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to get AI response');\n    }\n    const data = await response.json();\n    return data.choices[0].message.content;\n  } catch (error) {\n    console.error('Error asking AI:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["OPENAI_API_KEY","process","env","REACT_APP_OPENAI_API_KEY","OPENAI_API_URL","getAIInsights","predictionData","prompt","total","churn_count","non_churn_count","churn_rate","response","fetch","method","headers","body","JSON","stringify","model","messages","role","content","temperature","max_tokens","ok","Error","data","json","aiResponse","choices","message","summary","recommendations","split","replace","trim","filter","rec","length","map","error","console","askAI","question","context"],"sources":["f:/uni/TelePredict/frontend/src/utils/openai.ts"],"sourcesContent":["// OpenAI API utility functions\r\n\r\nconst OPENAI_API_KEY = process.env.REACT_APP_OPENAI_API_KEY;\r\nconst OPENAI_API_URL = 'https://api.openai.com/v1/chat/completions';\r\n\r\ninterface AIInsightResponse {\r\n  summary: string;\r\n  recommendations: string[];\r\n}\r\n\r\nexport const getAIInsights = async (predictionData: any): Promise<AIInsightResponse> => {\r\n  try {\r\n    const prompt = `Analyze this telecom churn prediction data and provide insights:\r\n    Total predictions: ${predictionData.total}\r\n    Churn predictions: ${predictionData.churn_count}\r\n    Non-churn predictions: ${predictionData.non_churn_count}\r\n    Churn rate: ${predictionData.churn_rate}%\r\n    \r\n    Please provide:\r\n    1. A brief summary of the prediction results\r\n    2. 3-5 specific recommendations for customer retention`;\r\n\r\n    const response = await fetch(OPENAI_API_URL, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${OPENAI_API_KEY}`,\r\n      },\r\n      body: JSON.stringify({\r\n        model: 'gpt-3.5-turbo',\r\n        messages: [\r\n          {\r\n            role: 'system',\r\n            content: 'You are a telecom analytics expert. Provide concise, actionable insights based on churn prediction data.'\r\n          },\r\n          {\r\n            role: 'user',\r\n            content: prompt\r\n          }\r\n        ],\r\n        temperature: 0.7,\r\n        max_tokens: 500\r\n      })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to get AI insights');\r\n    }\r\n\r\n    const data = await response.json();\r\n    const aiResponse = data.choices[0].message.content;\r\n\r\n    // Parse the AI response into structured format\r\n    const [summary, ...recommendations] = aiResponse.split('\\n\\n');\r\n    \r\n    return {\r\n      summary: summary.replace('Summary:', '').trim(),\r\n      recommendations: recommendations\r\n        .filter(rec => rec.trim().length > 0)\r\n        .map(rec => rec.replace(/^\\d+\\.\\s*/, '').trim())\r\n    };\r\n  } catch (error) {\r\n    console.error('Error getting AI insights:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const askAI = async (question: string, context: any): Promise<string> => {\r\n  try {\r\n    const response = await fetch(OPENAI_API_URL, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${OPENAI_API_KEY}`,\r\n      },\r\n      body: JSON.stringify({\r\n        model: 'gpt-3.5-turbo',\r\n        messages: [\r\n          {\r\n            role: 'system',\r\n            content: 'You are a telecom analytics expert. Answer questions about churn prediction data concisely and accurately.'\r\n          },\r\n          {\r\n            role: 'user',\r\n            content: `Context: ${JSON.stringify(context)}\\n\\nQuestion: ${question}`\r\n          }\r\n        ],\r\n        temperature: 0.7,\r\n        max_tokens: 300\r\n      })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to get AI response');\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data.choices[0].message.content;\r\n  } catch (error) {\r\n    console.error('Error asking AI:', error);\r\n    throw error;\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}